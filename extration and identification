# Import necessary libraries
import os
import cv2
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Set up the directory paths
train_dir = "path_to_training_data_directory"
test_dir = "path_to_test_data_directory"

# Set up the ImageDataGenerator for data augmentation
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

# Set up the flow of images from the directory
train_generator = train_datagen.flow_from_directory(directory=train_dir, target_size=(64, 64), batch_size=32, class_mode='categorical')
test_generator = test_datagen.flow_from_directory(directory=test_dir, target_size=(64, 64), batch_size=32, class_mode='categorical')

# Build the model architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(train_generator, epochs=10, validation_data=test_generator)

# Save the model
model.save("weed_classification_model.h5")

# Load the model
model = tf.keras.models.load_model("weed_classification_model.h5")

# Define the class names
class_names = ['Weed A', 'Weed B', 'Weed C']

# Implement the application using OpenCV for live webcam inferencing
cap = cv2.VideoCapture(0)

while True:
    # Capture the frame
    ret, frame = cap.read()

    # Convert the image to RGB format
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Resize the image
    img = cv2.resize(rgb, (64, 64))

    # Preprocess the image
    img = np.expand_dims(img, axis=0)
    img = img / 255.0

    # Make predictions on the image
    prediction = model.predict(img)
    index = np.argmax(prediction)

    # Display the predicted class on the frame
    cv2.putText(frame, class_names[index], (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow("Weed Classification", frame)

    # Exit the program when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the resources
